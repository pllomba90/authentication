from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt

db = SQLAlchemy()
bcrypt = Bcrypt()

def connect_db(app):
    db.app = app
    db.init_app(app)

   
class User(db.Model):
    """Individual user as a class"""
    __tablename__ = 'users'

    def __repr__(self):
        """Show user info"""
        return  f"<User {self.first_name} {self.last_name}>"
    
    @classmethod
    def register(cls, username, pwd , first_name, last_name, email):
        hashed = bcrypt.generate_password_hash(pwd)
        hashed_utf8 = hashed.decode("utf8")

        user = cls(
            username=username,
            password=hashed_utf8,
            first_name=first_name,
            last_name=last_name,
            email=email
        )

        db.session.add(user)
        return user
    
    @classmethod
    def authenticate(cls, username, pwd):
        u = User.query.filter_by(username=username).first()
        if u and bcrypt.check_password_hash(u.password, pwd):
            return u
        else:
            return False
    
    username = db.Column(db.String(20),
                         primary_key=True)
    
    password = db.Column(db.String,
                         nullable=False)
    
    email = db.Column(db.String(50),
                         nullable=False)
    
    first_name = db.Column(db.String(30),
                         nullable=False)
    
    last_name = db.Column(db.String(30),
                         nullable=False)
    
    feedback = db.relationship("Feedback", 
                               backref="user", 
                               cascade="all,delete")
    

class Feedback(db.Model):
    """Content generated by users"""

    __tablename__ = 'content'

    id = db.Column(db.Integer,
                   autoincrement=True,
                   primary_key=True)
    title = db.Column(db.String,
                      nullable=False)
    
    content = db.Column(db.Text,
                        nullable=False)
    
    username = db.Column(db.String(20),
                        db.ForeignKey('users.username'),
                        nullable=False,)